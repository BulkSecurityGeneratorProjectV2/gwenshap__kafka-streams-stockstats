/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.shapira.examples.streams.stockstats.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Trade extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Trade\",\"namespace\":\"com.shapira.examples.streams.stockstats.avro\",\"fields\":[{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"ticker\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"size\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence type;
  @Deprecated public java.lang.CharSequence ticker;
  @Deprecated public double price;
  @Deprecated public int size;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Trade() {}

  /**
   * All-args constructor.
   */
  public Trade(java.lang.CharSequence type, java.lang.CharSequence ticker, java.lang.Double price, java.lang.Integer size) {
    this.type = type;
    this.ticker = ticker;
    this.price = price;
    this.size = size;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return ticker;
    case 2: return price;
    case 3: return size;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.CharSequence)value$; break;
    case 1: ticker = (java.lang.CharSequence)value$; break;
    case 2: price = (java.lang.Double)value$; break;
    case 3: size = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'ticker' field.
   */
  public java.lang.CharSequence getTicker() {
    return ticker;
  }

  /**
   * Sets the value of the 'ticker' field.
   * @param value the value to set.
   */
  public void setTicker(java.lang.CharSequence value) {
    this.ticker = value;
  }

  /**
   * Gets the value of the 'price' field.
   */
  public java.lang.Double getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'size' field.
   */
  public java.lang.Integer getSize() {
    return size;
  }

  /**
   * Sets the value of the 'size' field.
   * @param value the value to set.
   */
  public void setSize(java.lang.Integer value) {
    this.size = value;
  }

  /** Creates a new Trade RecordBuilder */
  public static com.shapira.examples.streams.stockstats.avro.Trade.Builder newBuilder() {
    return new com.shapira.examples.streams.stockstats.avro.Trade.Builder();
  }
  
  /** Creates a new Trade RecordBuilder by copying an existing Builder */
  public static com.shapira.examples.streams.stockstats.avro.Trade.Builder newBuilder(com.shapira.examples.streams.stockstats.avro.Trade.Builder other) {
    return new com.shapira.examples.streams.stockstats.avro.Trade.Builder(other);
  }
  
  /** Creates a new Trade RecordBuilder by copying an existing Trade instance */
  public static com.shapira.examples.streams.stockstats.avro.Trade.Builder newBuilder(com.shapira.examples.streams.stockstats.avro.Trade other) {
    return new com.shapira.examples.streams.stockstats.avro.Trade.Builder(other);
  }
  
  /**
   * RecordBuilder for Trade instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Trade>
    implements org.apache.avro.data.RecordBuilder<Trade> {

    private java.lang.CharSequence type;
    private java.lang.CharSequence ticker;
    private double price;
    private int size;

    /** Creates a new Builder */
    private Builder() {
      super(com.shapira.examples.streams.stockstats.avro.Trade.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.shapira.examples.streams.stockstats.avro.Trade.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ticker)) {
        this.ticker = data().deepCopy(fields()[1].schema(), other.ticker);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.size)) {
        this.size = data().deepCopy(fields()[3].schema(), other.size);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Trade instance */
    private Builder(com.shapira.examples.streams.stockstats.avro.Trade other) {
            super(com.shapira.examples.streams.stockstats.avro.Trade.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ticker)) {
        this.ticker = data().deepCopy(fields()[1].schema(), other.ticker);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.size)) {
        this.size = data().deepCopy(fields()[3].schema(), other.size);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public java.lang.CharSequence getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public com.shapira.examples.streams.stockstats.avro.Trade.Builder setType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'type' field */
    public com.shapira.examples.streams.stockstats.avro.Trade.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'ticker' field */
    public java.lang.CharSequence getTicker() {
      return ticker;
    }
    
    /** Sets the value of the 'ticker' field */
    public com.shapira.examples.streams.stockstats.avro.Trade.Builder setTicker(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ticker = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'ticker' field has been set */
    public boolean hasTicker() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'ticker' field */
    public com.shapira.examples.streams.stockstats.avro.Trade.Builder clearTicker() {
      ticker = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'price' field */
    public java.lang.Double getPrice() {
      return price;
    }
    
    /** Sets the value of the 'price' field */
    public com.shapira.examples.streams.stockstats.avro.Trade.Builder setPrice(double value) {
      validate(fields()[2], value);
      this.price = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'price' field has been set */
    public boolean hasPrice() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'price' field */
    public com.shapira.examples.streams.stockstats.avro.Trade.Builder clearPrice() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'size' field */
    public java.lang.Integer getSize() {
      return size;
    }
    
    /** Sets the value of the 'size' field */
    public com.shapira.examples.streams.stockstats.avro.Trade.Builder setSize(int value) {
      validate(fields()[3], value);
      this.size = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'size' field has been set */
    public boolean hasSize() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'size' field */
    public com.shapira.examples.streams.stockstats.avro.Trade.Builder clearSize() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Trade build() {
      try {
        Trade record = new Trade();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ticker = fieldSetFlags()[1] ? this.ticker : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.price = fieldSetFlags()[2] ? this.price : (java.lang.Double) defaultValue(fields()[2]);
        record.size = fieldSetFlags()[3] ? this.size : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
